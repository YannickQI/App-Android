package com.qi.testemanha2

import android.R
import android.content.res.Configuration
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.animation.core.spring
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Person
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.coerceAtLeast
import androidx.compose.ui.unit.dp
import com.qi.testemanha2.ui.theme.TesteManha2Theme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            TesteManha2Theme {
		MyApp()
            }
        }
    }
}

@Composable
fun Lista(names : List<String> = List(10){"$it"}){
    LazyColumn(modifier = Modifier.padding(vertical = 5.dp)){
        items(names){
            Greeting(name = it)
        }
    }
}

@Composable
fun MyApp(){
    Lista()
}

@Composable
fun Greeting(name: String) {

    var exception by remember {
        mutableStateOf(false)
    }

    val animaçao by animateDpAsState(
        targetValue = if(exception) 15.dp else 0.dp,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioHighBouncy,
            stiffness = Spring.StiffnessLow
        )
    )

    Surface(
        color = MaterialTheme.colorScheme.primary,
        shape = MaterialTheme.shapes.medium,//aredonda bordas
        modifier = Modifier
            .padding/*bordas*/(horizontal = 5.dp, vertical = 5.dp)
            .fillMaxWidth()
    ) {

        Row(
            //coloca para os lados ou centraliza
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.Top,
            //tamanho das bordas
            modifier = Modifier.padding(20.dp)
        ) {

            Column(
                modifier = Modifier.padding(horizontal = animaçao.coerceAtLeast(0.dp))
            ) {
                Icon(
                    imageVector = Icons.Rounded.Person,
                    contentDescription = null
                )
                if (exception) {
                    Text(text = "$name")

                }
            }
            
            Spacer(modifier = Modifier.width(10.dp))

            ElevatedButton(onClick = { exception = !exception }) {
                Text(text = if(exception) "CLARO" else "ESCURO")

            }
        }
    }
}

@Preview(
    showBackground = true,
    name = "MODO CLARO",
    widthDp = 350
)

@Preview(
    showBackground = true,
    name = "MODO ESCURO",
    widthDp = 350,
    uiMode = Configuration.UI_MODE_NIGHT_YES
)

@Composable
fun DefaultPreview() {
    TesteManha2Theme {
        MyApp()
    }
}