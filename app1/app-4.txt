package com.qi.aulamanha4

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.annotation.DrawableRes
import androidx.annotation.StringRes
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyHorizontalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Search
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.qi.aulamanha4.ui.theme.AulaManha4Theme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AulaManha4Theme {

            }
        }
    }
}

@Composable
fun Pesquisa(
    modifier: Modifier = Modifier,
){
    Surface(
        color = Color.DarkGray,
        shape = MaterialTheme.shapes.medium,
        modifier = modifier
            .fillMaxWidth()
            .padding(10.dp)
    ) {

        Spacer(modifier = Modifier.height(10.dp))

        Row(
            modifier = Modifier.padding(10.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.coruja),
                contentDescription = "coruja",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(20.dp)
                    .clip(CircleShape)
                    .border(0.5.dp, Color.White, CircleShape)
            )
            /*
            Image(
                imageVector = Icons.Outlined.Search,// imagem do sistema
                contentDescription = null,
                modifier = Modifier.size(20.dp)
            )
            */

            Spacer(modifier = Modifier.width(10.dp))

            BasicTextField(
                value = "",
                onValueChange = {}
            )
        }
    }
}

@Composable
fun Avatar1(
    modifier: Modifier = Modifier,
    @DrawableRes image : Int = R.drawable.cachorro,
    @StringRes text : Int = R.string.vazio
){
    Surface(
        color = Color.DarkGray,
        shape = MaterialTheme.shapes.small,
        modifier = modifier.padding(10.dp)
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = modifier.padding(20.dp)
        ) {
            Image(
                painter = painterResource(id = image),
                contentDescription = null,
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(50.dp)
                    .clip(CircleShape)
                    .border(1.5.dp, Color.White, CircleShape)
            )
            
            Spacer(modifier = Modifier.height(5.dp))

            Text(
                text = stringResource(id = text),
                color = Color.White
            )

        }
    }
}

@Composable
fun Avatar2(
    modifier: Modifier = Modifier,
    @DrawableRes image : Int = R.drawable.cachorro,
    @StringRes text : Int = R.string.vazio
){
    Surface(
        color = Color.DarkGray,
        shape = MaterialTheme.shapes.small,
        modifier = modifier.padding(10.dp)
    ) {
        Row (
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center,
            modifier = modifier
                .width(100.dp)
                .height(55.dp),

                ){
            Image(
                painter = painterResource(id = image),
                contentDescription = null,
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(50.dp)
                    .clip(CircleShape)
                    .border(1.5.dp, Color.White, CircleShape)
            )

            Text(
                text = stringResource(id = text),
                color = Color.White,
                style = MaterialTheme.typography.titleSmall,
                modifier = modifier.fillMaxWidth()

            )
        }

    }
}

data class Elementos(
    var image: Int = R.drawable.cachorro ,
    var text: Int = R.string.vazio
)

val listaElementos = listOf(
    Elementos(),
    Elementos(),
    Elementos(),
    Elementos(),
    Elementos(),
)

@Composable
fun ListaHorizontal1(
    modifier: Modifier = Modifier,
    list: List<Elementos>
){
    LazyRow {
    items(list) { x ->
        Avatar1(
            image = x.image,
            text = x.text
        )
        }
    }
}

@Composable
fun ListaHorizontal2(
    modifier: Modifier = Modifier,
    list: List<Elementos>
){
    LazyHorizontalGrid(
        rows = GridCells.Fixed(2),
        modifier = modifier.height(150.dp)
    ){
            items(list){
                y -> Avatar2(
                text = y.text,
                image = y.image
                )
        }
    }
}

@Preview(
    showBackground = true,
)
@Composable
fun DefaultPreview() {
    AulaManha4Theme {
        //Pesquisa()
        //Avatar1()
        //Avatar2()
        //ListaHorizontal1(list = listaElementos)
        ListaHorizontal2(list = listaElementos)
    }
}